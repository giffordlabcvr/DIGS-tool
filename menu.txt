#***************************************************************************
# Subroutine:  is_distinct_locus
# Description: determine whether or not to merge a locus into previous
#***************************************************************************
sub is_distinct_locus {

	my ($self, $locus_ref, $data_ref, $settings_ref) = @_;

	# Get settings
	my $range       = $settings_ref->{range};
	my $start_token = $settings_ref->{start};
	my $end_token   = $settings_ref->{end};
	my $verbose     = $self->{verbose};
	my $mode        = $self->{defragment_mode};
	unless ($mode)  { die; }
	unless ($range) { die; }
	
	# Get the current hit values
	my $name             = $locus_ref->{assigned_name};
	my $gene             = $locus_ref->{assigned_gene};					
	unless ($gene) { # If there is no assigned gene set, use probe gene	
		$gene = $locus_ref->{probe_gene};
	}			
	my $scaffold         = $locus_ref->{scaffold};	
	my $start            = $locus_ref->{$start_token};
	my $end              = $locus_ref->{$end_token};
	my $orientation      = $locus_ref->{orientation};			


	# Get the last hit values
	my $last_name        = $data_ref->{assigned_name};
	my $last_gene        = $data_ref->{assigned_gene};		
	unless ($last_gene) {  # If there is no assigned gene set, use probe gene	
		$last_gene = $data_ref->{probe_gene};
	}	
	my $last_scaffold    = $data_ref->{scaffold};	
	my $last_start       = $data_ref->{$start_token};
	my $last_end         = $data_ref->{$end_token};
	my $last_orientation = $data_ref->{orientation};			

	
	# Exclude the obvious cases
	if ($scaffold ne $last_scaffold) { return 0; }  # different scaffolds

	# Check orientation
	if ($orientation ne $last_orientation) {
		unless ($mode eq 'consolidate') { 
			if ($verbose) {
				print "\n\t\t Identified pair of loci that are in range, but different orientations";
			}
			return 0;
		}
		else {
			unless ($last_gene and $gene) { die; } # Should never get here		
		}
	}

	# Take action depending on whether we are DEFRAGMENTING or CONSOLIDATING
	if ($gene and $last_gene) { 
		if ($mode eq 'defragment') {
			if ($gene ne $last_gene) { return 0; }  # different genes
		}
		elsif ($mode eq 'consolidate' or $mode eq 'consolidate2') { 
			# do nothing (these loci can be merged, even though different genes)
		}
		else { # Shouldn't get here
			die;
		}
	}
	else { # Shouldn't get here
		print "\n\t\t ERROR genes not found: ene $gene LAST $last_gene";;
		$devtools->print_hash($data_ref);
		die; 
	}
	
	# If on same scaffold in same orientation, determine how far apart 
	my $gap = $start - $last_end;		
	if ($verbose) {
		#print "\n\t\t    - Defragment calculation '$scaffold': '$start'-'$last_end' = $gap";
		print "\n\t\t    - Gap between loci = $gap";
	}

	# Test whether to combine this pair of loci into a single merged locus
	if ($gap <= $range) {  # Combine
		if ($verbose) {
			if ($last_name and $last_gene) {
				print "\n\t\t      - Added pair to cluster: $last_name";
				print "($last_gene [$last_orientation]), $name ($gene [$orientation])"; 		
			}
			else { print "\n\t\t      - Added pair to cluster"; }
		}
		return 1;
	}
	else { # Don't combine
		return 0;
	}
}











